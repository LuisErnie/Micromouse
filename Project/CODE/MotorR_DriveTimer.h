/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : MotorR_DriveTimer.h
**     Project   : Project
**     Processor : MC9S12C32MFA25
**     Component : TimerInt
**     Version   : Component 02.159, Driver 01.20, CPU db: 2.87.402
**     Compiler  : CodeWarrior HC12 C Compiler
**     Date/Time : 04/13/19, 20:59
**     Abstract  :
**         This component "TimerInt" implements a periodic interrupt.
**         When the component and its events are enabled, the "OnInterrupt"
**         event is called periodically with the period that you specify.
**         TimerInt supports also changing the period in runtime.
**         The source of periodic interrupt can be timer compare or reload
**         register or timer-overflow interrupt (of free running counter).
**     Settings  :
**         Timer name                  : TIM_Counter (16-bit)
**         Compare name                : TC2
**         Counter shared              : Yes
**
**         High speed mode
**             Prescaler               : divide-by-32
**             Clock                   : 750000 Hz
**           Initial period/frequency
**             Xtal ticks              : 32000
**             microseconds            : 4000
**             milliseconds            : 4
**             seconds (real)          : 0.004
**             Hz                      : 250
**
**         Runtime setting             : period/frequency interval (continual setting)
**             ticks                   : 16000 to 48000 ticks
**             microseconds            : 2000 to 6000 microseconds
**             milliseconds            : 2 to 6 milliseconds
**             seconds (real)          : 0.002 to 0.006 seconds
**             Hz                      : 167 to 500 Hz
**
**         Initialization:
**              Timer                  : Enabled
**              Events                 : Enabled
**
**         Timer registers
**              Counter                : TCNT      [$0044]
**              Mode                   : TIOS      [$0040]
**              Run                    : TSCR1     [$0046]
**              Prescaler              : TSCR2     [$004D]
**
**         Compare registers
**              Compare                : TC2       [$0054]
**
**         Flip-flop registers
**              Mode                   : TCTL2     [$0049]
**     Contents  :
**         Enable           - byte MotorR_DriveTimer_Enable(void);
**         Disable          - byte MotorR_DriveTimer_Disable(void);
**         SetPeriodTicks16 - byte MotorR_DriveTimer_SetPeriodTicks16(word Ticks);
**         SetPeriodTicks32 - byte MotorR_DriveTimer_SetPeriodTicks32(dword Ticks);
**         SetPeriodUS      - byte MotorR_DriveTimer_SetPeriodUS(word Time);
**         SetPeriodMS      - byte MotorR_DriveTimer_SetPeriodMS(word Time);
**
**     Copyright : 1997 - 2010 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __MotorR_DriveTimer
#define __MotorR_DriveTimer

/* MODULE MotorR_DriveTimer. */

#include "Cpu.h"

#pragma CODE_SEG MotorR_DriveTimer_CODE

#define MotorR_DriveTimer_SPT16_MIN 0x3E80U /* Lower bound of interval for method SetPeriodTicks16 */
#define MotorR_DriveTimer_SPT16_MAX 0xBB80U /* Upper bound of interval for method SetPeriodTicks16 */
#define MotorR_DriveTimer_SPT32_MIN 0x3E80UL /* Lower bound of interval for method SetPeriodTicks32 */
#define MotorR_DriveTimer_SPT32_MAX 0xBB80UL /* Upper bound of interval for method SetPeriodTicks32 */
#define MotorR_DriveTimer_SPUS_MIN 0x07D0U /* Lower bound of interval for method SetPeriodUS */
#define MotorR_DriveTimer_SPUS_MAX 0x1770U /* Upper bound of interval for method SetPeriodUS */
#define MotorR_DriveTimer_SPMS_MIN 0x02U /* Lower bound of interval for method SetPeriodMS */
#define MotorR_DriveTimer_SPMS_MAX 0x06U /* Upper bound of interval for method SetPeriodMS */
/* Deprecated constants, for backward compatibility */
#define MotorR_DriveTimer_SPT16Min 0x3E80U /* Deprecated. Lower bound of interval for method SetPeriodTicks16 */
#define MotorR_DriveTimer_SPT16Max 0xBB80U /* Deprecated. Upper bound of interval for method SetPeriodTicks16 */
#define MotorR_DriveTimer_SPT32Min 0x3E80UL /* Deprecated. Lower bound of interval for method SetPeriodTicks32 */
#define MotorR_DriveTimer_SPT32Max 0xBB80UL /* Deprecated. Upper bound of interval for method SetPeriodTicks32 */
#define MotorR_DriveTimer_SPUSMin 0x07D0U /* Deprecated. Lower bound of interval for method SetPeriodUS */
#define MotorR_DriveTimer_SPUSMax 0x1770U /* Deprecated. Upper bound of interval for method SetPeriodUS */
#define MotorR_DriveTimer_SPMSMin 0x02U /* Deprecated. Lower bound of interval for method SetPeriodMS */
#define MotorR_DriveTimer_SPMSMax 0x06U /* Deprecated. Upper bound of interval for method SetPeriodMS */


byte MotorR_DriveTimer_Enable(void);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_Enable (component TimerInt)
**
**     Description :
**         This method enables the component - it starts the timer.
**         Events may be generated (<DisableEvent>/<EnableEvent>).
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte MotorR_DriveTimer_Disable(void);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_Disable (component TimerInt)
**
**     Description :
**         This method disables the component - it stops the timer. No
**         events will be generated.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte MotorR_DriveTimer_SetPeriodTicks16(word Ticks);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_SetPeriodTicks16 (component TimerInt)
**
**     Description :
**         This method sets the new period of the generated events.
**         The period is expressed in main oscillator (usualy External
**         osc., internal osc. if exits and external osc. is disabled)
**         ticks as a 16-bit unsigned integer number.
**         This method is available only if the runtime setting type
**         'from interval' is selected in the Timing dialog box in
**         the Runtime setting area.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Ticks           - Period to set [in Xtal ticks]
**                      (16000 to 48000 ticks)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte MotorR_DriveTimer_SetPeriodTicks32(dword Ticks);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_SetPeriodTicks32 (component TimerInt)
**
**     Description :
**         This method sets the new period of the generated events.
**         The period is expressed in main oscillator (usualy External
**         osc., internal osc. if exits and external osc. is disabled)
**         ticks as a 32-bit unsigned integer number.
**         This method is available only if the runtime setting type
**         'from interval' is selected in the Timing dialog box in
**         the Runtime setting area.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Ticks           - Period to set [in Xtal ticks]
**                      (16000 to 48000 ticks)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte MotorR_DriveTimer_SetPeriodUS(word Time);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_SetPeriodUS (component TimerInt)
**
**     Description :
**         This method sets the new period of the generated events.
**         The period is expressed in microseconds as a 16-bit
**         unsigned integer number.
**         This method is available only if the runtime setting type
**         'from interval' is selected in the Timing dialog box in
**         the Runtime setting area.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Time            - Period to set [in microseconds]
**                      (2000 to 6000 microseconds)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte MotorR_DriveTimer_SetPeriodMS(word Time);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_SetPeriodMS (component TimerInt)
**
**     Description :
**         This method sets the new period of the generated events.
**         The period is expressed in miliseconds as a 16-bit
**         unsigned integer number.
**         This method is available only if the runtime setting type
**         'from interval' is selected in the Timing dialog box in
**         the Runtime setting area.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Time            - Period to set [in miliseconds]
**                      (2 to 6 milliseconds)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

void MotorR_DriveTimer_Init(void);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_Init (component TimerInt)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void MotorR_DriveTimer_Interrupt(void);
/*
** ===================================================================
**     Method      :  MotorR_DriveTimer_Interrupt (component TimerInt)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END MotorR_DriveTimer. */

#endif /* ifndef __MotorR_DriveTimer */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.02 [04.44]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
